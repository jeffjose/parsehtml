#!/usr/bin/env python3

import sys
import parsel
import argparse
from bs4 import BeautifulSoup
import requests
import fileinput
import simplejson as json

from  pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import TerminalTrueColorFormatter, Terminal256Formatter

parser = argparse.ArgumentParser(description = "Parse and filter HTML")

parser.add_argument('query', help = "CSS selector and filter expression", default = ":root", nargs = "?")
parser.add_argument('--input', '-i', help = "Input URL. Use - for stdin", default = "-")
parser.add_argument('--indent', help = "Indent", default = 2, type = int)
parser.add_argument('--nocolor', help = "Dont colorize output", action="store_true")

args = parser.parse_args()

def parseHTML(input):

    if input.startswith('http'):
        html = requests.get(input).text
    elif input is "-":
        html = sys.stdin.read()
    else:
        html = open(input, 'r').read()

    return html

parser.add_argument('input', help = "Input URL. Use - for stdin", default = "-")

def formatter(str):
    try:
        j = json.loads(str)
    except:
        return str
    else:
        if args.nocolor:
            return json.dumps(j, indent = args.indent)
        else:
            return highlight(json.dumps(j, indent = args.indent), PythonLexer(), Terminal256Formatter(style = "autumn"))

def printer(tags, display):

    for tag in tags:

        if not display:
            print(tag.prettify(formatter = formatter), end = "")
        else:

            if display in ['innerHTML', 'text']:
                text = tag.get_text()
                try:
                    print(highlight(json.dumps(json.loads(text.replace('\n', '')), indent = args.indent), PythonLexer(), Terminal256Formatter(style = 'autumn')))
                except:
                    print(text)
            else:
                print(tag.contents[0].get(display))

def parseSelector(query):

    try:
        selector, display = query.split('|')
    except:
        selector = query
        display = ""

    return selector.strip(), display.strip()

html = parseHTML(args.input)

selector, display = parseSelector(args.query)

matches = map(lambda x: BeautifulSoup(x, features = 'html.parser'), parsel.Selector(html).css(selector).getall())

printer(matches, display)
